name: ci

on:
  push:
    branches:
      - master
      - dev
    tags:
      - '*'
  pull_request:
    branches:
      - master
      - dev
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - ready_for_review
      - unlocked
      - review_requested
  workflow_dispatch:

env:
  DOCKER_REGISTRY_REPOSITORY: sysflowtelemetry/sf-collector
  UBI_DOCKER_REGISTRY_REPOSITORY: sysflowtelemetry/ubi
  ALPINE_DOCKER_REGISTRY_REPOSITORY: sysflowtelemetry/alpine
  GH_ORGANIZATION: sysflow-telemetry

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        path:
          - 'src/collector'
          - 'src/libs'
          - 'examples'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Run clang-format style check
      uses: jidicula/clang-format-action@v4.5.0
      with:
        clang-format-version: '12'
        check-path: ${{ matrix.path }}
  ubi:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Read manifest
        shell: bash
        run: |
          echo "FALCO_VERSION=$(awk -F'=' '/FALCO_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
          echo "FALCO_LIBS_VERSION=$(awk -F'=' '/FALCO_LIBS_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
          echo "UBI_VERSION=$(awk -F'=' '/UBI_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
      - name: Set image tags
        shell: bash
        run: |
          echo "BASE_TAG=$(echo base-${{ env.FALCO_LIBS_VERSION }}-${{ env.FALCO_VERSION }}-${{ env.UBI_VERSION }})" >> $GITHUB_ENV
          echo "MODS_TAG=$(echo mods-${{ env.FALCO_LIBS_VERSION }}-${{ env.FALCO_VERSION }}-${{ env.UBI_VERSION }})" >> $GITHUB_ENV
          echo "DRIVER_TAG=$(echo driver-${{ env.FALCO_LIBS_VERSION }}-${{ env.FALCO_VERSION }}-${{ env.UBI_VERSION }})" >> $GITHUB_ENV
      - name: Check package version
        id: checks
        shell: bash
        run: |
          echo "##[set-output name=base_exists;] $(curl --silent -f --head -lL https://hub.docker.com/v2/repositories/${{ env.UBI_DOCKER_REGISTRY_REPOSITORY }}/tags/${{ env.BASE_TAG }}/ > /dev/null && echo 1 || echo 0)"
          echo "##[set-output name=mods_exists;] $(curl --silent -f --head -lL https://hub.docker.com/v2/repositories/${{ env.UBI_DOCKER_REGISTRY_REPOSITORY }}/tags/${{ env.MODS_TAG }}/ > /dev/null && echo 1 || echo 0)"
          echo "##[set-output name=driver_exists;] $(curl --silent -f --head -lL https://hub.docker.com/v2/repositories/${{ env.UBI_DOCKER_REGISTRY_REPOSITORY }}/tags/${{ env.DRIVER_TAG }}/ > /dev/null && echo 1 || echo 0)"
      - name: Init modules
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
        run: make -C modules init
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set build args
        id: args
        shell: bash
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/*/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Build and push base
        id: base_docker_build
        uses: docker/build-push-action@v2
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
        with:
          context: .
          push: true
          file: Dockerfile.ubi.amd64
          tags: |
            ${{ env.UBI_DOCKER_REGISTRY_REPOSITORY }}:${{ env.BASE_TAG }}
            ghcr.io/${{ env.GH_ORGANIZATION }}/ubi:${{ env.BASE_TAG }}
          target: base
          build-args: |
            UBI_VER=${{ env.UBI_VERSION }}
            BUILD_NUMBER=${{ steps.args.outputs.sha_short }}
            VERSION=${{ steps.args.outputs.branch }}
            RELEASE=${{ steps.args.outputs.sha_short }}
          secrets: |
            rhuser=${{ secrets.RH_USERNAME }}
            rhpassword=${{ secrets.RH_PASSWORD }}
      - name: Build and push mods
        id: mods_docker_build
        uses: docker/build-push-action@v2
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
        with:
          context: .
          push: true
          file: Dockerfile.ubi.amd64
          tags: |
            ${{ env.UBI_DOCKER_REGISTRY_REPOSITORY }}:${{ env.MODS_TAG }}
            ghcr.io/${{ env.GH_ORGANIZATION }}/ubi:${{ env.MODS_TAG }}
          target: mods
          build-args: |
            UBI_VER=${{ env.UBI_VERSION }}
            BUILD_NUMBER=${{ steps.args.outputs.sha_short }}
            VERSION=${{ steps.args.outputs.branch }}
            RELEASE=${{ steps.args.outputs.sha_short }}
          secrets: |
            rhuser=${{ secrets.RH_USERNAME }}
            rhpassword=${{ secrets.RH_PASSWORD }}
      - name: Build and push driver
        id: driver_docker_build
        uses: docker/build-push-action@v2
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
        with:
          context: .
          push: true
          file: Dockerfile.driver.amd64
          tags: |
            ${{ env.UBI_DOCKER_REGISTRY_REPOSITORY }}:${{ env.DRIVER_TAG }}
            ghcr.io/${{ env.GH_ORGANIZATION }}/ubi:${{ env.DRIVER_TAG }}
          target: driver
          build-args: |
            UBI_VER=${{ env.UBI_VERSION }}
            FALCO_VER=${{ env.FALCO_VERSION }}
            FALCO_LIBS_VER=${{ env.FALCO_LIBS_VERSION }}
            BUILD_NUMBER=${{ steps.args.outputs.sha_short }}
            VERSION=${{ steps.args.outputs.branch }}
            RELEASE=${{ steps.args.outputs.sha_short }}
          secrets: |
            rhuser=${{ secrets.RH_USERNAME }}
            rhpassword=${{ secrets.RH_PASSWORD }}
      - name: Image digest
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 || steps.checks.outputs.driver_exists == 0 }}
        run: |
          echo ${{ steps.base_docker_build.outputs.digest }}
          echo ${{ steps.mods_docker_build.outputs.digest }}
          echo ${{ steps.driver_docker_build.outputs.digest }}
  alpine:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Read manifest
        shell: bash
        run: |
          echo "FALCO_VERSION=$(awk -F'=' '/FALCO_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
          echo "FALCO_LIBS_VERSION=$(awk -F'=' '/FALCO_LIBS_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
          echo "ALPINE_VERSION=$(awk -F'=' '/ALPINE_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
      - name: Set image tags
        shell: bash
        run: |
          echo "BASE_TAG=$(echo base-${{ env.FALCO_LIBS_VERSION }}-${{ env.FALCO_VERSION }}-${{ env.ALPINE_VERSION }})" >> $GITHUB_ENV
          echo "MODS_TAG=$(echo mods-${{ env.FALCO_LIBS_VERSION }}-${{ env.FALCO_VERSION }}-${{ env.ALPINE_VERSION }})" >> $GITHUB_ENV
      - name: Check package version
        id: checks
        shell: bash
        run: |
          echo "##[set-output name=base_exists;] $(curl --silent -f --head -lL https://hub.docker.com/v2/repositories/${{ env.ALPINE_DOCKER_REGISTRY_REPOSITORY }}/tags/${{ env.BASE_TAG }}/ > /dev/null && echo 1 || echo 0)"
          echo "##[set-output name=mods_exists;] $(curl --silent -f --head -lL https://hub.docker.com/v2/repositories/${{ env.ALPINE_DOCKER_REGISTRY_REPOSITORY }}/tags/${{ env.MODS_TAG }}/ > /dev/null && echo 1 || echo 0)"
      - name: Init modules
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
        run: make -C modules init
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set build args
        id: args
        shell: bash
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/*/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Build and push base
        id: base_docker_build
        uses: docker/build-push-action@v2
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
        with:
          context: .
          push: true
          file: Dockerfile.alpine.amd64
          tags: |
            ${{ env.ALPINE_DOCKER_REGISTRY_REPOSITORY }}:${{ env.BASE_TAG }}
            ghcr.io/${{ env.GH_ORGANIZATION }}/alpine:${{ env.BASE_TAG }}
          target: base
          build-args: |
            ALPINE_VER=${{ env.ALPINE_VERSION }}
            BUILD_NUMBER=${{ steps.args.outputs.sha_short }}
            VERSION=${{ steps.args.outputs.branch }}
            RELEASE=${{ steps.args.outputs.sha_short }}
      - name: Build and push mods
        id: mods_docker_build
        uses: docker/build-push-action@v2
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
        with:
          context: .
          push: true
          file: Dockerfile.alpine.amd64
          tags: |
            ${{ env.ALPINE_DOCKER_REGISTRY_REPOSITORY }}:${{ env.MODS_TAG }}
            ghcr.io/${{ env.GH_ORGANIZATION }}/alpine:${{ env.MODS_TAG }}
          target: mods
          build-args: |
            ALPINE_VER=${{ env.ALPINE_VERSION }}
            BUILD_NUMBER=${{ steps.args.outputs.sha_short }}
            VERSION=${{ steps.args.outputs.branch }}
            RELEASE=${{ steps.args.outputs.sha_short }}
      - name: Image digest
        if: ${{ steps.checks.outputs.base_exists == 0 || steps.checks.outputs.mods_exists == 0 }}
        run: |
          echo ${{ steps.base_docker_build.outputs.digest }}
          echo ${{ steps.mods_docker_build.outputs.digest }}
  # tests:
  #   runs-on: ubuntu-latest
  #   needs: [lint, ubi, alpine]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #         fetch-depth: 0
  #     - name: Init modules
  #       run: make -C modules init
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Run tests
  #       run: |
  #         make docker-testing-build
  #         make docker-test
  # docker:
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #         fetch-depth: 0
  #     - name: Read manifest
  #       shell: bash
  #       run: |
  #         echo "FALCO_VERSION=$(awk -F'=' '/FALCO_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
  #         echo "FALCO_LIBS_VERSION=$(awk -F'=' '/FALCO_LIBS_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
  #         echo "FALCO_LIBS_DRIVER_VERSION=$(awk -F'=' '/FALCO_LIBS_DRIVER_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
  #         echo "UBI_VERSION=$(awk -F'=' '/UBI_VERSION/{print $2}' makefile.manifest.inc)" >> $GITHUB_ENV
  #     - name: Init modules
  #       run: make -C modules init
  #     - name: Build image metadata
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: |
  #           ${{ env.DOCKER_REGISTRY_REPOSITORY }}
  #           ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=edge,branch=master
  #           type=ref,event=branch
  #           type=match,pattern=^\d.\d.\d$
  #           type=ref,event=pr
  #           type=sha,prefix=
  #           type=sha,format=long,prefix=
  #         labels: |
  #           org.opencontainers.image.documentation=https://sysflow.readthedocs.io/
  #           org.opencontainers.image.vendor=SysFlow
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #       with:
  #         version: v0.6.3
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       if: ${{ github.event_name != 'pull_request' }}
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       if: ${{ github.event_name != 'pull_request' }}
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Set build args
  #       id: args
  #       shell: bash
  #       run: |
  #         echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/*/})"
  #         echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: "${{ steps.meta.outputs.tags }}"
  #         labels: "${{ steps.meta.outputs.labels }}"
  #         target: runtime
  #         build-args: |
  #           UBI_VER=${{ env.UBI_VERSION }}
  #           FALCO_VER=${{ env.FALCO_VERSION }}
  #           FALCO_LIBS_VER=${{ env.FALCO_LIBS_VERSION }}
  #           FALCO_LIBS_DRIVER_VER=${{ env.FALCO_LIBS_DRIVER_VERSION }}
  #           BUILD_NUMBER=${{ steps.args.outputs.sha_short }}
  #           VERSION=${{ steps.args.outputs.branch }}
  #           RELEASE=${{ steps.args.outputs.sha_short }}
  #     - name: Push README to Dockerhub
  #       uses: christian-korneck/update-container-description-action@v1
  #       if: ${{ github.ref == 'refs/heads/master' && github.event_name != 'pull_request' }}
  #       env:
  #         DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  #         DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
  #       with:
  #         destination_container_repo: ${{ env.DOCKER_REGISTRY_REPOSITORY }}
  #         provider: dockerhub
  #         readme_file: "README.md"
  #     - name: Image digest
  #       run: echo ${{ steps.docker_build.outputs.digest }}
  # release:
  #   needs: [docker]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Setup cmake
  #       uses: jwlawson/actions-setup-cmake@v1.12
  #       with:
  #         cmake-version: '3.16.x'
  #     - name: Get version from tag
  #       id: tag_name
  #       shell: bash
  #       run: |
  #         GHREF=${GITHUB_REF#refs/tags/}; echo ::set-output name=current_version::${GHREF%%-*}
  #         echo ::set-output name=current_tag::${GITHUB_REF#refs/tags/}
  #     - name: Init modules
  #       run: make -C modules init
  #     - name: Build Release Assets
  #       id: build_release_assets
  #       shell: bash
  #       run: |
  #         make docker-libs-build
  #         make docker-runtime-build
  #         make docker-libs-build/musl
  #         make docker-runtime-build/musl
  #         make package
  #         make package-libs
  #         make package-libs/musl
  #         export $(sed 's/\?//g' makefile.manifest.inc | grep -v '^#' | xargs)
  #         echo "##[set-output name=bindeb;] $(ls ${{ github.workspace }}/scripts/cpack/sfcollector-$SYSFLOW_VERSION-x86_64.deb)"
  #         echo "##[set-output name=libdeb;] $(ls ${{ github.workspace }}/scripts/cpack/libsysflow-$SYSFLOW_VERSION-x86_64.deb)"
  #         echo "##[set-output name=libmusldeb;] $(ls ${{ github.workspace }}/scripts/cpack/libsysflow-musl-$SYSFLOW_VERSION-x86_64.deb)"
  #         echo "##[set-output name=binrpm;] $(ls ${{ github.workspace }}/scripts/cpack/sfcollector-$SYSFLOW_VERSION-x86_64.rpm)"
  #         echo "##[set-output name=librpm;] $(ls ${{ github.workspace }}/scripts/cpack/libsysflow-$SYSFLOW_VERSION-x86_64.rpm)"
  #         echo "##[set-output name=libmuslrpm;] $(ls ${{ github.workspace }}/scripts/cpack/libsysflow-musl-$SYSFLOW_VERSION-x86_64.rpm)"
  #         echo "##[set-output name=bintgz;] $(ls ${{ github.workspace }}/scripts/cpack/sfcollector-$SYSFLOW_VERSION-x86_64.tar.gz)"
  #         echo "##[set-output name=libtgz;] $(ls ${{ github.workspace }}/scripts/cpack/libsysflow-$SYSFLOW_VERSION-x86_64.tar.gz)"
  #         echo "##[set-output name=libmusltgz;] $(ls ${{ github.workspace }}/scripts/cpack/libsysflow-musl-$SYSFLOW_VERSION-x86_64.tar.gz)"
  #     - name: Get Changelog Entry
  #       id: changelog_reader
  #       uses: mindsers/changelog-reader-action@v2
  #       with:
  #         version: ${{ steps.tag_name.outputs.current_version }}
  #         path: ./CHANGELOG.md
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         body: ${{ steps.changelog_reader.outputs.changes }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         prerelease: ( contains(steps.tag_name.outputs.current_version, '-rc') || contains(steps.tag_name.outputs.current_version, '-alpha') || contains(steps.tag_name.outputs.current_version, '-beta') )
  #         draft: true
  #         files: |
  #           ${{ steps.build_release_assets.outputs.bindeb }}
  #           ${{ steps.build_release_assets.outputs.libdeb }}
  #           ${{ steps.build_release_assets.outputs.libmusldeb }}
  #           ${{ steps.build_release_assets.outputs.binrpm }}
  #           ${{ steps.build_release_assets.outputs.librpm }}
  #           ${{ steps.build_release_assets.outputs.libmuslrpm }}
  #           ${{ steps.build_release_assets.outputs.bintgz }}
  #           ${{ steps.build_release_assets.outputs.libtgz }}
  #           ${{ steps.build_release_assets.outputs.libmusltgz }}

